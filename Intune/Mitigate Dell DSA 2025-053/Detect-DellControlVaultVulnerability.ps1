<#PSScriptInfo
.VERSION V1.0 - 8/14/2025
#>

<# 
.DESCRIPTION
	This script is intended to verify a Dell system against the vulnerabilities disclosed here https://www.dell.com/support/kbdoc/000276106/dsa-2025-053
	and is not intended to be supported/updated
	It is not intended to be used for keeping ControlVault firmware or drivers up-to-date
	Checks if Dell Control Vault Driver is installed on System and returns result to $ControlVaultDriver
	If Control Vault Driver is found, pull the last line from CVFirmwareUpgradeLog.txt and compare the FW revision to the 
	required FW revision from DSA for CV3 and CV3+.  If required firmware meet, output to console

.USEAGE
	This script, Verify_ControlVault_dsa-2025-053_Standalone_V1.ps1 is intended to be run directly on the system intended for testing.  
	Verify_ControlVault_dsa-2025-053_inTune_XX.ps1 still in development intended to be run for multiple device compliance reporting through Intune
	
	RETURNS: ControlVault firmware should be updated.
	RETURNS: Verification Success: ControlVault firmware includes mitigations for DSA-2025-053
	RETURNS: Verification Success: Your computer does not have ControlVault
	RETRUNS: ControlVault maybe updated but needs to complete firmware update validation, Please reboot computer
	RETRUNS: There appears to be an issue parsing the CVFirmwareUpgradeLog.txt; this is likely caused by the last entry of this log not containing the expected data

.NOTES
  The script was taken from Dell an extended by return codes for Intune Remediation Scripts: https://www.dell.com/support/kbdoc/en-us/000353975/how-to-confirm-installation-of-a-remediated-controlvault3-version-listed-in-dsa-2025-053#ConfirmingControlVault3VersionviaPowerShellScript
#>

# Static variables with firmware versions with remediation for ControlVault3 and ControlVault3+
$cv3_required_FWver = [Version]"5.15.7.0"
$cv3plus_required_FWver = [Version]"6.2.24.0"

# Static variables for messaging
$DSA_URL = "https://www.dell.com/support/kbdoc/000276106/dsa-2025-053"
$checkmark = [char]0x2705
$xmark = [char]0x2612
$CVoutofdate = "$xmark ControlVault firmware should be updated. Please refer to $DSA_URL"
$CVcompliant = "$checkmark Verification Success: ControlVault firmware includes mitigations for DSA-2025-053"
$CVnotfound = "Verification Success: Your computer does not have ControlVault"
$CVerror = "There appears to be an issue parsing the CVFirmwareUpgradeLog.txt; this is likely caused by the last entry of this log not containing the expected data"
$CVreboot = "ControlVault maybe updated but needs to complete firmware update validation, Please reboot computer"

$SystemManufacturer = (Get-WmiObject -Class:Win32_ComputerSystem).Manufacturer
$SystemModel = (Get-WmiObject -Class:Win32_ComputerSystem).Model
if ($SystemManufacturer -notlike "*Dell*") {
	"Only Dell Systems are affected."
	exit 0
}
if ($SystemModel -notlike "*Latitude*" -and $SystemModel -notlike "*Precision*") {
	"Only Dell Latitude and Precision Systems are affected."
	exit 0
}

# Checks if Dell Control Vault Driver is installed on System and returns result to $ControlVaultDriver
$controlVaultDriver = Get-WmiObject Win32_PnPSignedDriver | Where-Object { $_.DeviceName -like "*Control Vault*" }
$resultstatus = 3

# Find the last entry of the firmwareupgrade log and determine if the firmware version is greater than the firmware version required 
if ($ControlVaultDriver) {
	$matchingLines = Get-Content "c:\Windows\System32\CVFirmwareUpgradeLog.txt" | Where-Object { $_ -match "Will not update ControlVault firmware from" -or $_ -match "Updating ControlVault firmware from" }
	$lastLine = $matchingLines | Select-Object -Last 1
	
	if ($lastLine -match "Updating ControlVault firmware from") {
		$resultstatus = 5
		Write-Host "$CVreboot"
	}
	else {
		if ($lastLine -match "Will not update ControlVault firmware from\s+(\d+\.\d+\.\d+\.\d+)") {
			$versionStr = $matches[1]
			$version = [Version]$versionStr
	 
			if (($version.Major -eq 5 -and $version -ge $cv3_required_FWver) -or
				($version.Major -eq 6 -and $version -ge $cv3plus_required_FWver)) {
				$resultstatus = 4
				Write-Host "$CVcompliant"
			}
			else {
				$resultstatus = 2
				Write-Host "$CVoutofdate"
			}
		}
		else {
			$resultstatus = 3
			Write-Host "$CVerror" 
		}
	}
}
else {
	$resultstatus = 1
	Write-Host "$CVnotfound"
}


# Create result object
$result = [PSCustomObject]@{
	ComputerName          = $env:COMPUTERNAME
	Timestamp             = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
	ControlVaultInstalled = $null -ne $controlVaultDriver
	Resultstatus          = $resultstatus
	DriverDetails         = if ($controlVaultDriver) {
        
		$controlVaultDriver | Select-Object DeviceName 
	}
 else {
		$null
	}
}

"$result"
if ($null -eq $result.DriverDetails) {
	"ControlVault not installed."
	exit 0
}
if ($result.Resultstatus -eq 2) {
	"Upgrade needed"
	exit 1
}
if ($result.Resultstatus -eq 3) {
	"Error, check logs."
	exit 1
}
if ($result.Resultstatus -eq 5) {
	"Reboot needed."
	exit 0
}
if ($result.Resultstatus -eq 4 -or $result.Resultstatus -eq 0) {
	"ControlVault is up to date."
	exit 0
}
"Undefined result. Check logs."
exit 1
